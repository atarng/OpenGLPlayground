#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;

// Tut4: Notice that the "1" here equals the "1" in glVertexAttribPointer
//layout(location = 1) in vec3 vertexColor;
//out vec3 fragmentColor; // Output data ; will be interpolated for each fragment.

// Tut5: 
layout(location = 1) in vec2 vertexUV;
out vec2 UV; // Output data ; will be interpolated for each fragment.


// Values that stay constant for the whole mesh.
// AlfredT: Added MVP handle for GLSL to register: glGetUniformLocation(programID, MVP)
uniform mat4 MVP;

void main(){

    //gl_Position.xyz = vertexPosition_modelspace;
    //gl_Position.w = 1.0;


	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	// to produce the color of each fragment
	UV = vertexUV;
}

